<?php

namespace Tests\Feature;

use App\Leads;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * Class LeadsTest
 * @package Tests\Feature
 */
class LeadsTest extends TestCase {

    use RefreshDatabase, withFaker;

    /**
     * Primary structure for a lead
     * @var string[]
     */
    private $lead_structure = [
        'first_name',
        'last_name',
        'email',
        'opt',
    ];

    public function setUp(): void {
        parent::setUp(); // TODO: Change the autogenerated stub
        // Seed test db //
        $this->seed();
    }

    /**
     * Gets all leads
     */
    public function testGetAllLeads(): void {
        $response = $this->get('/api/v1/leads');
        $response->assertStatus(200);
        $response->assertJsonStructure(
            [
                'current_page',
                'data' => [
                    '*' => $this->lead_structure,
                ],
            ]
        );
    }

    /**
     * Gets a single random lead
     */
    public function testGetALead(): void {
        // Grab a random lead to fetch //
        $lead = Leads::all()->random();

        $response = $this->get("api/v1/leads/{$lead->id}");
        $response->assertStatus(200);
        $response->assertJsonStructure($this->lead_structure);
    }

    /**
     * Creates a new lead
     */
    public function testCreateALead(): void {
        $lead = [
            'first_name' => $this->faker->firstName,
            'last_name' => $this->faker->lastName,
            'email' => $this->faker->safeEmail,
            'opt' => $this->faker->boolean,
        ];
        $response = $this->postJson('api/v1/leads', $lead);

        $response->assertStatus(201);
        $response->assertJsonStructure($this->lead_structure);
        $response->assertJson(
            [
                'first_name' => $lead['first_name'],
                'last_name' => $lead['last_name'],
                'email' => $lead['email'],
                'opt' => $lead['opt'],
            ]
        );

    }

    /**
     * Updates a lead
     */
    public function testUpdateALead(): void {
        $lead = Leads::all()->random();

        $update = [
            'first_name' => $this->faker->optional(.5, $lead->first_name)->firstName,
            'last_name' => $this->faker->optional(.5, $lead->last_name)->lastName,
            'email' => $this->faker->optional(.5, $lead->email)->safeEmail,
            'opt' => $this->faker->optional(.5, $lead->opt)->boolean,
        ];

        $response = $this->putJson("api/v1/leads/{$lead->id}", $update);

        $response->assertStatus(202);

        $response->assertJson(
            [
                'first_name' => $update['first_name'],
                'last_name' => $update['last_name'],
                'email' => $update['email'],
                'opt' => $update['opt'],
                'id' => $lead->id,
            ]
        );
    }

    /**
     * Deletes a single note
     */
    public function testDeleteANote(): void {
        $lead = Leads::all()->random();

        $response = $this->delete("api/v1/leads/{$lead->id}");
        $response->assertStatus(204);
    }

}
